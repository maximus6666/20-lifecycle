{"version":3,"sources":["components/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","props","getTimeString","min","Math","floor","state","time","sec","startTimer","paused","id","setInterval","updatedTime","step","onTick","setState","clearInterval","button","React","createRef","this","autostart","buttonLabel","timeString","styleWidth","className","ref","onClick","style","width","Component","App","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAGqBA,E,kDAEjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAaVC,cAAgB,WACZ,IAAIC,EAAMC,KAAKC,MAAO,EAAKC,MAAMC,KAAO,IAAQ,IAC5CC,EAAMJ,KAAKC,MAAO,EAAKC,MAAMC,KAAO,IAAQ,IAUhD,OARIJ,EAAM,KACNA,EAAM,IAAMA,GAGZK,EAAM,KACNA,EAAM,IAAMA,GAGV,GAAN,OAAUL,EAAV,YAAiBK,IA1BF,EA6BnBC,WAAa,WACT,GAAI,EAAKH,MAAMI,OAAQ,CACnB,IAAMC,EAAKC,aAAY,WACnB,IAAMC,EAAc,EAAKP,MAAMC,KAAO,EAAKD,MAAMQ,KACjD,EAAKR,MAAMS,OAAOF,GAClB,EAAKG,SAAS,CAACT,KAAMM,IAEG,IAApB,EAAKP,MAAMC,OACXU,cAAcN,GACd,EAAKK,SAAS,CAACN,QAAQ,OAE5B,EAAKJ,MAAMQ,MAEd,EAAKE,SAAS,CACVT,KAAM,EAAKN,MAAMM,KACjBI,GAAIA,EACJD,QAAQ,SAGZO,cAAc,EAAKX,MAAMK,IACzB,EAAKK,SAAS,CAACN,QAAQ,KA/C3B,EAAKQ,OAASC,IAAMC,YAEpB,EAAKd,MAAQ,CACTC,KAAMN,EAAMM,KACZI,GAAG,EACHD,QAAQ,EACRI,KAAMb,EAAMa,MAAQ,IACpBC,OAAQd,EAAMc,QAAW,cATd,E,qDAqDnB,WACQM,KAAKpB,MAAMqB,WACXD,KAAKZ,e,oBAIb,WACI,IAAMc,EAAcF,KAAKf,MAAMI,OAAS,QAAU,QAC5Cc,EAAaH,KAAKnB,gBAClBuB,EAAU,UAAyB,IAAlBJ,KAAKf,MAAMC,KAAcc,KAAKpB,MAAMM,KAA3C,KAEhB,OACI,sBAAKmB,UAAU,UAAf,UACI,wBAAQA,UAAU,SAASC,IAAKN,KAAKH,OAAQU,QAASP,KAAKZ,WAA3D,SAAwEc,IACxE,8BAAMC,IACN,qBAAKK,MAAO,CAACC,MAAOL,GAAaC,UAAU,gB,GAtExBP,IAAMY,WCU1BC,MAVf,WACE,OACE,sBAAKN,UAAU,MAAf,UACE,uCACA,cAAC,EAAD,CAAOnB,KAAM,IAAMe,WAAW,IAC9B,cAAC,EAAD,CAAOP,OAAQ,SAACR,GAAD,OAAU0B,QAAQC,IAAI,yFAAqB3B,IAAOA,KAAM,IAAOe,WAAW,EAAMR,KAAM,UCI5FqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cbf6236d.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\";\r\n\r\nexport default class Timer extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.button = React.createRef();\r\n\r\n        this.state = {\r\n            time: props.time,\r\n            id:0,\r\n            paused: true,\r\n            step: props.step || 1000,\r\n            onTick: props.onTick || (()=> {return}),\r\n        }\r\n\r\n    }\r\n\r\n    getTimeString = () => {\r\n        let min = Math.floor((this.state.time / 1000) / 60);\r\n        let sec = Math.floor((this.state.time / 1000) % 60);\r\n\r\n        if (min < 10 ) {\r\n            min = \"0\" + min;\r\n        }\r\n\r\n        if (sec < 10) {\r\n            sec = \"0\" + sec;\r\n        }\r\n\r\n        return `${min}:${sec}`;\r\n    }\r\n\r\n    startTimer = () => {\r\n        if (this.state.paused) {\r\n            const id = setInterval(() => {\r\n                const updatedTime = this.state.time - this.state.step;\r\n                this.state.onTick(updatedTime)\r\n                this.setState({time: updatedTime});\r\n    \r\n                if (this.state.time === 0) {\r\n                    clearInterval(id);\r\n                    this.setState({paused: true});\r\n                };\r\n            }, this.state.step);\r\n\r\n            this.setState({\r\n                time: this.props.time,\r\n                id: id,\r\n                paused: false\r\n            })\r\n        }else {\r\n            clearInterval(this.state.id);\r\n            this.setState({paused: true})\r\n        }\r\n    }\r\n\r\n    componentDidMount() {               \r\n        if (this.props.autostart) {\r\n            this.startTimer();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const buttonLabel = this.state.paused ? \"Start\" : \"Pause\";\r\n        const timeString = this.getTimeString();\r\n        const styleWidth = `${(this.state.time * 100) / this.props.time}%`;\r\n\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <button className=\"button\" ref={this.button} onClick={this.startTimer}>{buttonLabel}</button> \r\n                <div>{timeString}</div>\r\n                <div style={{width: styleWidth}} className=\"line\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\nimport Timer from \"./components/Timer.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Timer</h1>\n      <Timer time={5000} autostart={false}/>\n      <Timer onTick={(time) => console.log(\"Залишилось часу \" + time)} time={20000} autostart={true} step={2000}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}